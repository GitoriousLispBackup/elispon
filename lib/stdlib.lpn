(define nil ())
(define not null?)
(define quote
  (vau args _ (car args)))
(define q quote)

(define apply
  (vau args env
    (eval (cons (eval (car args) env)
                (eval (car (cdr args)) env))
          (if (= (length args) 3)
              (eval (car (cdr (cdr args))) env)
              env))))

(define wrap
  (vau args e
     (if (not (= (length args) 1))
         (error "wrap: expecped 1 argument")
         (sequence
           (define fexpr (eval (car args) e))
           (if (not (fexpr? fexpr))
               (error "wrap: expected fexpr")
               (vau arguments env
                  (apply fexpr (eval (cons list arguments) env))))))))

(define unwrap
  (vau args e
     (if (not (= (length args) 1))
         (error "unwrap: expecped 1 argument")
         (sequence
           (define app (eval (car args) e))
           (if (not (fexpr? app))
               (error "unwrap: expected fexpr")
               (sequence
                 (define fexpr (%open-fexpr% app))
                 (eval (car (cdr (car (cdr (cdr (car fexpr))))))
                       (cdr fexpr))))))))

(define lambda
  (vau args e
     (wrap (eval (list vau (car args) (quote _) (car (cdr args))) e))))
(define λ lambda)

; ((caar . cdar) cadr . cddr)
(define caar (lambda expr (car (car (car expr)))))
(define cadr (lambda expr (car (cdr (car expr)))))
(define cdar (lambda expr (cdr (car (car expr)))))
(define cddr (lambda expr (cdr (cdr (car expr)))))

; (((caaar . cdaar) cadar . cddar) (caadr . cdadr) caddr . cdddr)
(define caaar (lambda expr (car (car (car (car expr))))))
(define caadr (lambda expr (car (car (cdr (car expr))))))
(define cadar (lambda expr (car (cdr (car (car expr))))))
(define caddr (lambda expr (car (cdr (cdr (car expr))))))
(define cdaar (lambda expr (cdr (car (car (car expr))))))
(define cdadr (lambda expr (cdr (car (cdr (car expr))))))
(define cddar (lambda expr (cdr (cdr (car (car expr))))))
(define cdddr (lambda expr (cdr (cdr (cdr (car expr))))))

(define and
  (vau args e
     (if (null? args)
         t
         (if (= (length args) 1)
             (eval (car args) e)
             (if (eval (car args) e)
                 (apply and (cdr args) e)
                 nil)))))
(define or
  (vau args e
     (if (null? args)
         nil
         (sequence
           (define arg (eval (car args) e))
           (if arg
               arg
               (apply or (cdr args) e))))))

(define cond
  (vau args e
     (if (null? args)
         nil
         (sequence
           (define clause (car args))
           (define len (length clause))
           (if (not (or (= len 2) (and (= len 3)
                                       (same? (cadr clause) (quote =>)))))
               (error "cond: malformed clause")
               (sequence
                 (define c (eval (car clause) e))
                 (if c
                     (if (= len 2)
                         (eval (car (cdr clause)) e)
                         ((eval (caddr clause) e) c))
                     (apply cond (cdr args) e))))))))

;; (define with
;;   (vau args environ
;;      (if (not (= (length args) 2))
;;          (error "with: expected 2 arguments")
;;          (sequence
;;            (define pattern (car (car args)))
;;            (define expression (eval (cdr (car args)) environ))
;;            (define body (car (cdr args)))
;;            (define new-env
;;              (lambda args
;;                (sequence
;;                  (define pat (car args))
;;                  (define exp (car (cdr args)))
;;                  (define env (car (cdr (cdr args))))
;;                  (cond
;;                   ((null? pat)
;;                    (if (not (null? exp))
;;                        (error "with: expression doesn't match pattern")
;;                        env))
;;                   ((symbol? pat)
;;                    (sequence
;;                      (eval (list define pat (list quote exp)) env)
;;                      env))
;;                   ((pair? pat)
;;                    (if (not (pair? exp))
;;                        (error "with: expression doesn't match pattern")
;;                        (new-env (cdr pat) (cdr exp)
;;                                 (new-env (car pat) (car exp) env))))
;;                   (t (error "with: wrong pattern"))))))
;;            (eval body (new-env pattern expression environ))))))

;; (define list?
;;   (vau args e
;;      (with ((l) . args)
;;        (or (null? l) (pair? l)))))

;; (define is-a?
;;   (vau args e
;;        (with ((typ obj) . args)
;;          (same? (eval typ e)
;;                 (type (eval obj e))))))

;; (define $append
;;   (vau args e
;;      (if (not (= (length args) 2))
;;          (error "append: expected 2 arguments")
;;          (sequence
;;            (define lst (car args))
;;            (define obj (car (cdr args)))
;;            (if (null? lst)
;;                (list obj)
;;                (if (not (pair? lst))
;;                    (error "append: expected pair as first argument")
;;                    (cons (car lst)
;;                          (apply $append (list (cdr lst) obj)))))))))
;; (define append (! $append))

;; (define caar
;;   (vau args e
;;      (if (not (= (length args) 1))
;;          (error "caar: expected 1 argument")
;;          (car (car (eval (car args) e))))))

;; (define cadr
;;   (vau args e
;;      (if (not (= (length args) 1))
;;          (error "cadr: expected 1 argument")
;;          (car (cdr (eval (car args) e))))))

;; (define cdar
;;   (vau args e
;;      (if (not (= (length args) 1))
;;          (error "cdar: expected 1 argument")
;;          (cdr (car (eval (car args) e))))))

;; (define cddr
;;   (vau args e
;;      (if (not (= (length args) 1))
;;          (error "cddr: expected 1 argument")
;;          (cdr (cdr (eval (car args) e))))))

;; (define let
;;   (vau args e
;;      (if (not (= (length args) 2))
;;          (error "let: expected 2 arguments")
;;          (eval (cadr args)
;;                (cons (cons (caar args)
;;                            (eval (cdar args) e))
;;                      e)))))

;; (define caaar (λ x (car (caar x))))
;; (define caadr (λ x (car (cadr x))))
;; (define cadar (λ x (car (cdar x))))
;; (define caddr (λ x (car (cddr x))))
;; (define cdaar (λ x (cdr (caar x))))
;; (define cdadr (λ x (cdr (cadr x))))
;; (define cddar (λ x (cdr (cdar x))))
;; (define cdddr (λ x (cdr (cddr x))))

;; (define lazy-cons
;;   (vau args e
;;      (if (not (= (length args) 2))
;;          (error "lazy-cons: expected 2 arguments")
;;          (cons e args))))

;; (define lazy-car
;;   (vau args e
;;      (if (not (= (length args) 1))
;;          (error "lazy-car: expected 1 argument")
;;          (let (c . (eval (car args) e))
;;            (eval (cadr c) (car c))))))

;; (define lazy-cdr
;;   (vau args e
;;      (if (not (= (length args) 1))
;;          (error "lazy-car: expected 1 argument")
;;          (let (c . (eval (car args) e))
;;            (eval (caddr c) (car c))))))
