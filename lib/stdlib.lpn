(define nil ())
(define not null?)

(define caar
  (ε args e
     (if (not (= (length args) 1))
         "Error: caar: expected 1 argument"
         (car (car (eval (car args) e))))))

(define cadr
  (ε args e
     (if (not (= (length args) 1))
         "Error: cadr: expected 1 argument"
         (car (cdr (eval (car args) e))))))

(define cdar
  (ε args e
     (if (not (= (length args) 1))
         "Error: cdar: expected 1 argument"
         (cdr (car (eval (car args) e))))))

(define cddr
  (ε args e
     (if (not (= (length args) 1))
         "Error: cddr: expected 1 argument"
         (cdr (cdr (eval (car args) e))))))

(define quote
  (ε args _ (car args)))

(define let
  (ε args e
     (if (not (= (length args) 2))
         "Error: let: expected 2 arguments"
         (eval (cadr args)
               (cons (cons (caar args)
                           (eval (cdar args) e))
                     e)))))

(define and
  (ε args e
     (if (null? args)
         t
         (if (= (length args) 1)
             (eval (car args) e)
             (if (eval (car args) e)
                 (apply and (cdr args))
                 nil)))))
(define or
  (ε args e
     (if (null? args)
         nil
         (let (arg . (eval (car args) e))
           (if arg arg (apply or (cdr args)))))))

(define list?
  (ε args e
     (if (not (= (length args) 1))
         "Error: list?: expected 1 argument"
         (or (null? (car args)) (pair? (car args))))))

(define !
  (ε args e
     (if (not (= (length args) 1))
         "Error: !: expecped 1 argument"
         (let (fexpr . (eval (car args) e))
           (if (not (fexpr? fexpr))
               "Error: !: expected fexpr"
               (ε arguments env
                  (apply fexpr (eval (cons list arguments) env))))))))

(define &
  (ε args e
     (if (not (= (length args) 1))
         "Error: &: expecped 1 argument"
         (let (app . (eval (car args) e))
           (if (not (fexpr? app))
               "Error: &: expected fexpr"
               (let (fexpr . (%open-fexpr% app))
                 (eval (cadr (car fexpr)) (cdr fexpr))))))))

(define lambda
  (ε args e
     (if (not (= (length args) 2))
         "Error: lambda: expected 2 arguments"
         (if (not (symbol? (car args)))
             "Error: lambda: expected symbol as first argument"
             (ε arguments env
                (eval (cadr args)
                      (cons (cons (car args) (eval (car arguments) env))
                            env)))))))
(define λ lambda)

(define caaar (λ x (car (caar x))))
(define caadr (λ x (car (cadr x))))
(define cadar (λ x (car (cdar x))))
(define caddr (λ x (car (cddr x))))
(define cdaar (λ x (cdr (caar x))))
(define cdadr (λ x (cdr (cadr x))))
(define cddar (λ x (cdr (cdar x))))
(define cdddr (λ x (cdr (cddr x))))
