(define nil ())
(define not null?)
(define quote
  (ε args _ (car args)))

(define lambda
  (ε args e
     (if (not (= (length args) 2))
         (error "lambda: expected 2 arguments")
         (if (not (symbol? (car args)))
             (error "lambda: expected symbol as first argument")
             (ε arguments env
                (eval (car (cdr args))
                      (cons (cons (car args) (eval (car arguments) env))
                            env)))))))
(define λ lambda)

(define and
  (ε args e
     (if (null? args)
         t
         (if (= (length args) 1)
             (eval (car args) e)
             (if (eval (car args) e)
                 (apply and (cdr args) e)
                 nil)))))
(define or
  (ε args e
     (if (null? args)
         nil
         (sequence
           (define arg (eval (car args) e))
           (if arg
               arg
               (apply or (cdr args) e))))))

(define cond
  (ε args e
     (if (null? args)
         nil
         (sequence
           (define clause (car args))
           (define len (length clause))
           (if (not (or (= len 2) (= len 3)))
               (error "cond: malformed clause")
               (sequence
                 (define c (eval (car clause) e))
                 (if c
                     (if (and (= len 3)
                              (eq? (car (cdr clause)) (quote =>)))
                         ((eval (car (cdr (cdr clause))) e) c)
                         (eval (car (cdr clause)) e))
                     (apply cond (cdr args)))))))))

;; (define let
;;   (ε args e
;;      (if (not (= (length args) 2))
;;          (error "let: expected 2 arguments")
;;          (sequence
;;            (define pattern (car (car args)))
;;            (define expr (eval (cdr (car args)) e))
;; TODO (cond ((symbol? pattern) ...) ...)
;;          (eval (cadr args)
;;                (cons (cons (caar args)
;;                            (eval (cdar args) e))
;;                      e))))

(define caar
  (ε args e
     (if (not (= (length args) 1))
         (error "caar: expected 1 argument")
         (car (car (eval (car args) e))))))

(define cadr
  (ε args e
     (if (not (= (length args) 1))
         (error "cadr: expected 1 argument")
         (car (cdr (eval (car args) e))))))

(define cdar
  (ε args e
     (if (not (= (length args) 1))
         (error "cdar: expected 1 argument")
         (cdr (car (eval (car args) e))))))

(define cddr
  (ε args e
     (if (not (= (length args) 1))
         (error "cddr: expected 1 argument")
         (cdr (cdr (eval (car args) e))))))

(define let
  (ε args e
     (if (not (= (length args) 2))
         (error "let: expected 2 arguments")
         (eval (cadr args)
               (cons (cons (caar args)
                           (eval (cdar args) e))
                     e)))))

(define list?
  (ε args e
     (if (not (= (length args) 1))
         (error "list?: expected 1 argument")
         (or (null? (car args)) (pair? (car args))))))

(define !
  (ε args e
     (if (not (= (length args) 1))
         (error "!: expecped 1 argument")
         (let (fexpr . (eval (car args) e))
           (if (not (fexpr? fexpr))
               (error "!: expected fexpr")
               (ε arguments env
                  (apply fexpr (eval (cons list arguments) env))))))))

(define &
  (ε args e
     (if (not (= (length args) 1))
         (error "&: expecped 1 argument")
         (let (app . (eval (car args) e))
           (if (not (fexpr? app))
               (error "&: expected fexpr")
               (let (fexpr . (%open-fexpr% app))
                 (eval (cadr (car fexpr)) (cdr fexpr))))))))

(define caaar (λ x (car (caar x))))
(define caadr (λ x (car (cadr x))))
(define cadar (λ x (car (cdar x))))
(define caddr (λ x (car (cddr x))))
(define cdaar (λ x (cdr (caar x))))
(define cdadr (λ x (cdr (cadr x))))
(define cddar (λ x (cdr (cdar x))))
(define cdddr (λ x (cdr (cddr x))))

(define lazy-cons
  (ε args e
     (if (not (= (length args) 2))
         (error "lazy-cons: expected 2 arguments")
         (cons e args))))

(define lazy-car
  (ε args e
     (if (not (= (length args) 1))
         (error "lazy-car: expected 1 argument")
         (let (c . (eval (car args) e))
           (eval (cadr c) (car c))))))

(define lazy-cdr
  (ε args e
     (if (not (= (length args) 1))
         (error "lazy-car: expected 1 argument")
         (let (c . (eval (car args) e))
           (eval (caddr c) (car c))))))
