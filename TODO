Number must have +/-INFINITY flags and take care of cmp to take that into
   account (this to support infinite list).

Printer should check this flag to print accordingly.

---

(define complex (struct r i)) -> complex
complex -> #<struct>
(define c (complex 4 2)) -> c
c -> #<object:complex>
(c . 'r) -> 4
(type c) -> #<struct> ;; complex

---

define should refuse binding a symbol already present in local environment

---

(with bindings
  ...)

bindings should not be visible outside the with, but those introduced in ...
   should be.

before with: {assoc1,parent1}
during with-binding: {assoc2,{assoc1,parent1}}
during with-body: env={assoc3,{assoc2,{assoc1,parent1}}}
after with: env={assoc3+assoc1,parent1}

---

char: actually need to use strings internally because of ε, é, etc. But how to
   deal with #\foo for instance? Maybe just authorize it! It's a kind of
   autoquoted symbol, might be useful? What is a character if not a kind of
   autoquoted symbol anyway?

---

vector type
(vector foo bar baz)
(make-vector 5)

---

"with" matching in stdlib: see notebook

---

Lexer should return a struct like this:

    struct Token {
      TokenType type;
      union {
        char *str;
        double num;
      } token;
      struct {
        int line, col
      } beg, end;
      char *source;
    }

and most of this information should be keeped at least until expansion time is
   over, maybe during runtime too to report fexpr error if the project goes
   this way

---

(error "message" symbol)

if error primitive have an additionnal argument, also print location info
   extracted from symbol

---

Fix the problem with Environment_delete which fail when trying to delete the
   same thing two times (some stuff like symbols might appear several time
   there)

=> go for a mark-and-sweep GC ?
=> use libgc ?

---

libunistring ?
libffi ?
libreadline ?
libgmp ?
